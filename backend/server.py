from fastapi import FastAPI, APIRouter, HTTPException, BackgroundTasks
from fastapi.responses import JSONResponse
from dotenv import load_dotenv
from starlette.middleware.cors import CORSMiddleware
from motor.motor_asyncio import AsyncIOMotorClient
import os
import logging
from pathlib import Path
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
import uuid
from datetime import datetime, timedelta
import asyncio
from contextlib import asynccontextmanager

# Import our modules
from scrapers.scraper_manager import ScraperManager
from prediction.prediction_engine import PredictionEngine
from models.database_models import *
from utils.scheduler import SchedulerManager
from enhanced_data_collector import EnhancedDataCollector

ROOT_DIR = Path(__file__).parent
load_dotenv(ROOT_DIR / '.env')

# MongoDB connection
mongo_url = os.environ['MONGO_URL']
client = AsyncIOMotorClient(mongo_url)
db = client[os.environ['DB_NAME']]

# Global instances
scraper_manager = None
prediction_engine = None
scheduler_manager = None
data_collector = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    global scraper_manager, prediction_engine, scheduler_manager, data_collector
    
    # Initialize services
    scraper_manager = ScraperManager(db)
    prediction_engine = PredictionEngine(db)
    scheduler_manager = SchedulerManager(db, scraper_manager, prediction_engine)
    data_collector = EnhancedDataCollector(db)
    
    # Start scheduler
    scheduler_manager.start()
    
    logger.info("ðŸš€ GeliÅŸmiÅŸ Bahis Tahmin Sistemi baÅŸlatÄ±ldÄ±!")
    
    yield
    
    # Cleanup
    scheduler_manager.stop()
    client.close()
    logger.info("ðŸ”´ Sistem kapatÄ±ldÄ±!")

# Create the main app
app = FastAPI(
    title="GeliÅŸmiÅŸ Bahis Tahmin Sistemi",
    description="58+ Ligden Veri Toplayan AI Destekli GeliÅŸmiÅŸ Bahis Tahmin Sistemi",
    version="2.0.0",
    lifespan=lifespan
)

# Create API router
api_router = APIRouter(prefix="/api")

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_credentials=True,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ===== ENHANCED ROUTES =====

@api_router.get("/")
async def root():
    return {
        "message": "ðŸŽ¯ GeliÅŸmiÅŸ Bahis Tahmin Sistemi API'ye HoÅŸgeldiniz!",
        "version": "2.0.0",
        "status": "active",
        "features": ["Enhanced Data Collection", "Advanced ML Models", "Real-time Predictions", "Comprehensive Analytics"]
    }

@api_router.get("/system/status")
async def get_system_status():
    """GeliÅŸmiÅŸ sistem durumunu kontrol et"""
    try:
        await db.command("ping")
        
        # DetaylÄ± koleksiyon bilgileri
        leagues_count = await db.leagues.count_documents({})
        active_leagues = await db.leagues.count_documents({"active": True})
        teams_count = await db.teams.count_documents({})
        matches_count = await db.matches.count_documents({})
        finished_matches = await db.matches.count_documents({"status": "finished"})
        upcoming_matches = await db.matches.count_documents({"status": "scheduled"})
        predictions_count = await db.predictions.count_documents({})
        team_stats_count = await db.team_stats.count_documents({})
        
        # Son 24 saatteki aktivite
        since_24h = datetime.utcnow() - timedelta(hours=24)
        recent_predictions = await db.predictions.count_documents({
            "created_at": {"$gte": since_24h}
        })
        
        return {
            "status": "healthy",
            "database": "connected",
            "version": "2.0.0",
            "collections": {
                "leagues": {"total": leagues_count, "active": active_leagues},
                "teams": teams_count,
                "matches": {"total": matches_count, "finished": finished_matches, "upcoming": upcoming_matches},
                "predictions": predictions_count,
                "team_stats": team_stats_count
            },
            "recent_activity": {
                "predictions_24h": recent_predictions
            },
            "timestamp": datetime.utcnow()
        }
    except Exception as e:
        logger.error(f"Sistem durumu kontrolÃ¼ hatasÄ±: {e}")
        raise HTTPException(status_code=500, detail="Sistem durumu kontrol edilemiyor")

@api_router.get("/leagues")
async def get_leagues():
    """GeliÅŸmiÅŸ lig bilgileri"""
    try:
        leagues = await db.leagues.find({"active": True}).to_list(1000)
        
        enhanced_leagues = []
        for league in leagues:
            league['_id'] = str(league['_id'])
            
            # Her lig iÃ§in takÄ±m sayÄ±sÄ±nÄ± ekle
            teams_count = await db.teams.count_documents({"league_id": league['id']})
            matches_count = await db.matches.count_documents({"league_id": league['id']})
            predictions_count = await db.predictions.count_documents({"league_id": league['id']})
            
            league['statistics'] = {
                "teams": teams_count,
                "matches": matches_count,
                "predictions": predictions_count
            }
            
            enhanced_leagues.append(league)
        
        return {"leagues": enhanced_leagues, "count": len(enhanced_leagues)}
    except Exception as e:
        logger.error(f"Ligler getirilemedi: {e}")
        raise HTTPException(status_code=500, detail="Ligler getirilemedi")

@api_router.get("/leagues/{league_id}/teams")
async def get_teams_by_league(league_id: str):
    """Belirtilen ligin takÄ±mlarÄ±nÄ± detaylÄ± bilgilerle getir"""
    try:
        teams = await db.teams.find({"league_id": league_id}).to_list(1000)
        
        enhanced_teams = []
        for team in teams:
            team['_id'] = str(team['_id'])
            
            # TakÄ±m istatistiklerini ekle
            team_stats = await db.team_stats.find_one({
                "team_id": team['id'],
                "season": "2024-25"
            })
            
            if team_stats:
                team_stats['_id'] = str(team_stats['_id'])
                team['current_season_stats'] = team_stats
            
            # Son 5 maÃ§Ä± ekle
            recent_matches = await db.matches.find({
                "$or": [{"home_team_id": team['id']}, {"away_team_id": team['id']}],
                "status": "finished"
            }).sort("match_date", -1).limit(5).to_list(5)
            
            team['recent_matches'] = len(recent_matches)
            enhanced_teams.append(team)
        
        return {"teams": enhanced_teams, "count": len(enhanced_teams)}
    except Exception as e:
        logger.error(f"TakÄ±mlar getirilemedi: {e}")
        raise HTTPException(status_code=500, detail="TakÄ±mlar getirilemedi")

@api_router.get("/matches/upcoming")
async def get_upcoming_matches(days: int = 7):
    """Gelecek X gÃ¼n iÃ§indeki maÃ§larÄ± detaylÄ± bilgilerle getir"""
    try:
        end_date = datetime.utcnow() + timedelta(days=days)
        matches = await db.matches.find({
            "match_date": {"$gte": datetime.utcnow(), "$lte": end_date}
        }).sort("match_date", 1).to_list(1000)
        
        enhanced_matches = []
        for match in matches:
            match['_id'] = str(match['_id'])
            
            # TakÄ±m isimlerini ekle
            home_team = await db.teams.find_one({"id": match['home_team_id']})
            away_team = await db.teams.find_one({"id": match['away_team_id']})
            
            if home_team and away_team:
                match['home_team_name'] = home_team['name']
                match['away_team_name'] = away_team['name']
                
                # Lig bilgisini ekle
                league = await db.leagues.find_one({"id": match['league_id']})
                if league:
                    match['league_name'] = league['name']
                
                # Bu maÃ§ iÃ§in tahminleri ekle
                predictions = await db.predictions.find({
                    "match_id": match['id']
                }).to_list(10)
                
                match['predictions'] = []
                for pred in predictions:
                    pred['_id'] = str(pred['_id'])
                    match['predictions'].append(pred)
                
                enhanced_matches.append(match)
        
        return {"matches": enhanced_matches, "count": len(enhanced_matches)}
    except Exception as e:
        logger.error(f"YaklaÅŸan maÃ§lar getirilemedi: {e}")
        raise HTTPException(status_code=500, detail="YaklaÅŸan maÃ§lar getirilemedi")

@api_router.get("/matches/recent")
async def get_recent_matches(days: int = 7):
    """Son X gÃ¼n iÃ§indeki tamamlanmÄ±ÅŸ maÃ§larÄ± getir"""
    try:
        start_date = datetime.utcnow() - timedelta(days=days)
        matches = await db.matches.find({
            "match_date": {"$gte": start_date, "$lte": datetime.utcnow()},
            "status": "finished"
        }).sort("match_date", -1).to_list(1000)
        
        enhanced_matches = []
        for match in matches:
            match['_id'] = str(match['_id'])
            
            # TakÄ±m isimlerini ekle
            home_team = await db.teams.find_one({"id": match['home_team_id']})
            away_team = await db.teams.find_one({"id": match['away_team_id']})
            
            if home_team and away_team:
                match['home_team_name'] = home_team['name']
                match['away_team_name'] = away_team['name']
                
                # Lig bilgisini ekle
                league = await db.leagues.find_one({"id": match['league_id']})
                if league:
                    match['league_name'] = league['name']
                
                enhanced_matches.append(match)
        
        return {"matches": enhanced_matches, "count": len(enhanced_matches)}
    except Exception as e:
        logger.error(f"Son maÃ§lar getirilemedi: {e}")
        raise HTTPException(status_code=500, detail="Son maÃ§lar getirilemedi")

@api_router.get("/predictions/today")
async def get_today_predictions():
    """BugÃ¼nkÃ¼ geliÅŸmiÅŸ tahminleri getir"""
    try:
        today_start = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)
        today_end = today_start + timedelta(days=1)
        
        predictions = await db.predictions.find({
            "match_date": {"$gte": today_start, "$lt": today_end}
        }).sort("confidence", -1).to_list(1000)
        
        enhanced_predictions = []
        for prediction in predictions:
            prediction['_id'] = str(prediction['_id'])
            
            # TakÄ±m ve lig bilgilerini ekle
            home_team = await db.teams.find_one({"id": prediction['home_team_id']})
            away_team = await db.teams.find_one({"id": prediction['away_team_id']})
            league = await db.leagues.find_one({"id": prediction['league_id']})
            
            if home_team and away_team and league:
                prediction['home_team_name'] = home_team['name']
                prediction['away_team_name'] = away_team['name']
                prediction['league_name'] = league['name']
                
                # MaÃ§ bilgilerini ekle
                match = await db.matches.find_one({"id": prediction['match_id']})
                if match:
                    prediction['match_time'] = match['match_date']
                    prediction['odds'] = {
                        "1x2": match.get('odds_1x2'),
                        "over_under": match.get('odds_over_under'),
                        "btts": match.get('odds_btts')
                    }
                
                enhanced_predictions.append(prediction)
        
        return {"predictions": enhanced_predictions, "count": len(enhanced_predictions)}
    except Exception as e:
        logger.error(f"BugÃ¼nkÃ¼ tahminler getirilemedi: {e}")
        raise HTTPException(status_code=500, detail="BugÃ¼nkÃ¼ tahminler getirilemedi")

@api_router.get("/predictions/all")
async def get_all_predictions(limit: int = 50):
    """TÃ¼m tahminleri geliÅŸmiÅŸ bilgilerle getir"""
    try:
        predictions = await db.predictions.find({}).sort("created_at", -1).limit(limit).to_list(limit)
        
        enhanced_predictions = []
        for prediction in predictions:
            prediction['_id'] = str(prediction['_id'])
            
            # TakÄ±m ve lig bilgilerini ekle
            home_team = await db.teams.find_one({"id": prediction['home_team_id']})
            away_team = await db.teams.find_one({"id": prediction['away_team_id']})
            league = await db.leagues.find_one({"id": prediction['league_id']})
            
            if home_team and away_team and league:
                prediction['home_team_name'] = home_team['name']
                prediction['away_team_name'] = away_team['name']
                prediction['league_name'] = league['name']
                
                enhanced_predictions.append(prediction)
        
        return {"predictions": enhanced_predictions, "count": len(enhanced_predictions)}
    except Exception as e:
        logger.error(f"TÃ¼m tahminler getirilemedi: {e}")
        raise HTTPException(status_code=500, detail="TÃ¼m tahminler getirilemedi")

@api_router.get("/predictions/match/{match_id}")
async def get_match_prediction(match_id: str):
    """Belirli bir maÃ§ iÃ§in tÃ¼m tahminleri getir"""
    try:
        predictions = await db.predictions.find({"match_id": match_id}).to_list(10)
        
        if not predictions:
            raise HTTPException(status_code=404, detail="Bu maÃ§ iÃ§in tahmin bulunamadÄ±")
        
        enhanced_predictions = []
        for prediction in predictions:
            prediction['_id'] = str(prediction['_id'])
            enhanced_predictions.append(prediction)
        
        # MaÃ§ bilgilerini de ekle
        match = await db.matches.find_one({"id": match_id})
        if match:
            match['_id'] = str(match['_id'])
            
            # TakÄ±m isimlerini ekle
            home_team = await db.teams.find_one({"id": match['home_team_id']})
            away_team = await db.teams.find_one({"id": match['away_team_id']})
            
            if home_team and away_team:
                match['home_team_name'] = home_team['name']
                match['away_team_name'] = away_team['name']
        
        return {
            "match": match,
            "predictions": enhanced_predictions,
            "count": len(enhanced_predictions)
        }
    except Exception as e:
        logger.error(f"MaÃ§ tahmini getirilemedi: {e}")
        raise HTTPException(status_code=500, detail="MaÃ§ tahmini getirilemedi")

@api_router.post("/data/generate-demo")
async def generate_demo_data(background_tasks: BackgroundTasks):
    """GeliÅŸmiÅŸ demo verisi oluÅŸtur"""
    try:
        if not data_collector:
            raise HTTPException(status_code=503, detail="Veri toplama servisi hazÄ±r deÄŸil")
        
        background_tasks.add_task(data_collector.generate_realistic_data)
        
        return {
            "message": "GeliÅŸmiÅŸ demo verisi oluÅŸturma iÅŸlemi baÅŸlatÄ±ldÄ±",
            "description": "Premier League takÄ±mlarÄ±, maÃ§larÄ±, istatistikleri ve tahminleri oluÅŸturuluyor",
            "timestamp": datetime.utcnow()
        }
    except Exception as e:
        logger.error(f"Demo veri oluÅŸturma baÅŸlatÄ±lamadÄ±: {e}")
        raise HTTPException(status_code=500, detail="Demo veri oluÅŸturma baÅŸlatÄ±lamadÄ±")

@api_router.post("/scraper/run")
async def trigger_scraper(background_tasks: BackgroundTasks):
    """GeliÅŸmiÅŸ veri toplama iÅŸlemini manuel olarak baÅŸlat"""
    try:
        if not scraper_manager:
            raise HTTPException(status_code=503, detail="Scraper servisi hazÄ±r deÄŸil")
        
        # Ã–nce demo veri oluÅŸtur, sonra scraper Ã§alÄ±ÅŸtÄ±r
        background_tasks.add_task(data_collector.generate_realistic_data)
        background_tasks.add_task(scraper_manager.run_scraping_job, None)
        
        return {
            "message": "GeliÅŸmiÅŸ veri toplama iÅŸlemi baÅŸlatÄ±ldÄ±",
            "description": "Demo verisi oluÅŸturulup, gerÃ§ek veri toplama da baÅŸlatÄ±ldÄ±",
            "leagues": "all",
            "timestamp": datetime.utcnow()
        }
    except Exception as e:
        logger.error(f"Scraper baÅŸlatÄ±lamadÄ±: {e}")
        raise HTTPException(status_code=500, detail="Scraper baÅŸlatÄ±lamadÄ±")

@api_router.post("/prediction/generate")
async def generate_predictions(background_tasks: BackgroundTasks):
    """GeliÅŸmiÅŸ tahmin Ã¼retme iÅŸlemini manuel olarak baÅŸlat"""
    try:
        if not prediction_engine:
            raise HTTPException(status_code=503, detail="Tahmin servisi hazÄ±r deÄŸil")
        
        background_tasks.add_task(prediction_engine.generate_predictions, None)
        
        return {
            "message": "GeliÅŸmiÅŸ tahmin Ã¼retme iÅŸlemi baÅŸlatÄ±ldÄ±",
            "description": "AI modelleri ile detaylÄ± tahminler Ã¼retiliyor",
            "matches": "all",
            "timestamp": datetime.utcnow()
        }
    except Exception as e:
        logger.error(f"Tahmin Ã¼retme baÅŸlatÄ±lamadÄ±: {e}")
        raise HTTPException(status_code=500, detail="Tahmin Ã¼retme baÅŸlatÄ±lamadÄ±")

@api_router.get("/stats/performance")
async def get_performance_stats():
    """GeliÅŸmiÅŸ sistem performans istatistikleri"""
    try:
        thirty_days_ago = datetime.utcnow() - timedelta(days=30)
        seven_days_ago = datetime.utcnow() - timedelta(days=7)
        
        # 30 gÃ¼nlÃ¼k performans
        total_predictions_30d = await db.predictions.count_documents({
            "created_at": {"$gte": thirty_days_ago}
        })
        
        correct_predictions_30d = await db.predictions.count_documents({
            "created_at": {"$gte": thirty_days_ago},
            "actual_result": {"$exists": True},
            "is_correct": True
        })
        
        # 7 gÃ¼nlÃ¼k performans
        total_predictions_7d = await db.predictions.count_documents({
            "created_at": {"$gte": seven_days_ago}
        })
        
        correct_predictions_7d = await db.predictions.count_documents({
            "created_at": {"$gte": seven_days_ago},
            "actual_result": {"$exists": True},
            "is_correct": True
        })
        
        # Bahis tÃ¼rÃ¼ne gÃ¶re performans
        bet_type_stats = {}
        for bet_type in ["1X2", "O/U2.5", "BTTS"]:
            total = await db.predictions.count_documents({
                "bet_type": bet_type,
                "created_at": {"$gte": thirty_days_ago}
            })
            correct = await db.predictions.count_documents({
                "bet_type": bet_type,
                "created_at": {"$gte": thirty_days_ago},
                "actual_result": {"$exists": True},
                "is_correct": True
            })
            
            accuracy = (correct / total * 100) if total > 0 else 0
            bet_type_stats[bet_type] = {
                "total": total,
                "correct": correct,
                "accuracy": round(accuracy, 2)
            }
        
        accuracy_30d = (correct_predictions_30d / total_predictions_30d * 100) if total_predictions_30d > 0 else 0
        accuracy_7d = (correct_predictions_7d / total_predictions_7d * 100) if total_predictions_7d > 0 else 0
        
        return {
            "overall_performance": {
                "last_30_days": {
                    "total_predictions": total_predictions_30d,
                    "correct_predictions": correct_predictions_30d,
                    "accuracy_percentage": round(accuracy_30d, 2)
                },
                "last_7_days": {
                    "total_predictions": total_predictions_7d,
                    "correct_predictions": correct_predictions_7d,
                    "accuracy_percentage": round(accuracy_7d, 2)
                }
            },
            "bet_type_performance": bet_type_stats,
            "timestamp": datetime.utcnow()
        }
    except Exception as e:
        logger.error(f"Performans istatistikleri getirilemedi: {e}")
        raise HTTPException(status_code=500, detail="Performans istatistikleri getirilemedi")

@api_router.get("/stats/league/{league_id}")
async def get_league_stats(league_id: str):
    """Belirli bir lig iÃ§in detaylÄ± istatistikler"""
    try:
        league = await db.leagues.find_one({"id": league_id})
        if not league:
            raise HTTPException(status_code=404, detail="Lig bulunamadÄ±")
        
        # Lig istatistikleri
        teams_count = await db.teams.count_documents({"league_id": league_id})
        matches_count = await db.matches.count_documents({"league_id": league_id})
        finished_matches = await db.matches.count_documents({"league_id": league_id, "status": "finished"})
        predictions_count = await db.predictions.count_documents({"league_id": league_id})
        
        # Son 10 maÃ§
        recent_matches = await db.matches.find({
            "league_id": league_id,
            "status": "finished"
        }).sort("match_date", -1).limit(10).to_list(10)
        
        # Gol ortalamalarÄ±
        total_goals = 0
        for match in recent_matches:
            if match.get('home_score') is not None and match.get('away_score') is not None:
                total_goals += match['home_score'] + match['away_score']
        
        avg_goals = round(total_goals / len(recent_matches), 2) if recent_matches else 0
        
        return {
            "league": {
                "id": league['id'],
                "name": league['name'],
                "country": league['country'],
                "season": league['season']
            },
            "statistics": {
                "teams": teams_count,
                "total_matches": matches_count,
                "finished_matches": finished_matches,
                "predictions": predictions_count,
                "avg_goals_per_match": avg_goals
            },
            "recent_matches": len(recent_matches),
            "timestamp": datetime.utcnow()
        }
    except Exception as e:
        logger.error(f"Lig istatistikleri getirilemedi: {e}")
        raise HTTPException(status_code=500, detail="Lig istatistikleri getirilemedi")

# Include the router in the main app
app.include_router(api_router)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8001)